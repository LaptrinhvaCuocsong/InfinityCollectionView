// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InfinityCollectionView
import Foundation
@_exported import InfinityCollectionView
import Swift
import UIKit
import _Concurrency
public protocol CarouselViewDelegate : AnyObject {
  func numberOfItems(in view: InfinityCollectionView.CarouselView) -> Swift.Int
  func carouselView(_ view: InfinityCollectionView.CarouselView, cellForItem item: Swift.Int) -> UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CarouselView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: InfinityCollectionView.CarouselViewDelegate?
  @_Concurrency.MainActor(unsafe) public var enableInfinity: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var paddingHorizontal: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var spacingHorizontal: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var defaultSizeCell: CoreGraphics.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var focusSizeCell: CoreGraphics.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mainAxisAlignment: InfinityCollectionView.CarouselLayout.MainAxisAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var enableFocusCenter: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var step: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension InfinityCollectionView.CarouselView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
}
extension InfinityCollectionView.CarouselLayout {
  public enum MainAxisAlignment {
    case start
    case center
    public static func == (a: InfinityCollectionView.CarouselLayout.MainAxisAlignment, b: InfinityCollectionView.CarouselLayout.MainAxisAlignment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CarouselLayoutAttr : UIKit.UICollectionViewLayoutAttributes {
  @_Concurrency.MainActor(unsafe) public var isFocus: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var defaultSizeCell: CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) public var focusSizeCell: CoreGraphics.CGSize
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CarouselLayout : UIKit.UICollectionViewLayout {
  @_Concurrency.MainActor(unsafe) public var enableInfinity: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var paddingHorizontal: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public var spacingHorizontal: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public var defaultSizeCell: CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) public var focusSizeCell: CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) public var mainAxisAlignment: InfinityCollectionView.CarouselLayout.MainAxisAlignment
  @_Concurrency.MainActor(unsafe) public var enableFocusCenter: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var step: Swift.Int?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layoutAttributesClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutAttributesForElements(in: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var collectionViewContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func shouldInvalidateLayout(forBoundsChange newBounds: CoreGraphics.CGRect) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func targetContentOffset(forProposedContentOffset proposedContentOffset: CoreGraphics.CGPoint, withScrollingVelocity velocity: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CarouselCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) open var animationTime: Foundation.TimeInterval {
    get
  }
  @_Concurrency.MainActor(unsafe) open func resizeLayout(isFocus: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func apply(_ layoutAttributes: UIKit.UICollectionViewLayoutAttributes)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension InfinityCollectionView.CarouselLayout.MainAxisAlignment : Swift.Equatable {}
extension InfinityCollectionView.CarouselLayout.MainAxisAlignment : Swift.Hashable {}
